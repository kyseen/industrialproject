{"version":3,"sources":["components/Loginform.js","components/Logout.js","components/HomePage.js","components/Additem.js","components/SearchItems.js","components/Createnewlist.js","components/Viewcurrentlists.js","components/Veiwcompletedlists.js","components/PrintList.js","components/EditList.js","components/Admin.js","components/App.jsx","index.js"],"names":["axios","require","Loginform","props","history","useHistory","useState","username","setUsername","password","setPassword","className","id","name","placeholder","value","onChange","e","target","type","Go","homepage","disabled","onClick","event","push","post","then","res","message","data","notify","preventDefault","Logout","loginform","Homepage","handleClick","Additem","barcode","setBarcode","setName","price","setPrice","weight","setWeight","description","setDesc","error","setError","catch","err","URL","handleErrors","response","ok","Error","statusText","Searchitems","handleDone","handleRefresh","window","location","reload","state","itemData","CustomStore","key","load","fetch","json","insert","values","method","body","JSON","stringify","headers","update","refreshMode","handleRefreshModeChange","bind","this","setState","Fragment","align","dataSource","showBorders","repaintChangesOnly","keyExpr","mode","allowUpdating","allowAdding","title","showTitle","width","height","my","at","of","itemType","colCount","colSpan","dataField","dataType","editorType","editorOptions","enabled","fileName","allowExportSelectedData","visible","defaultPageSize","showPageSizeSelector","allowedPageSizes","showInfo","alignment","allowEditing","caption","format","precision","Component","Createnewlist","items","currentitem","companyname","companyaddress","array","quantity","address","for","class","defaultSortOrder","replace","console","log","renderDetail","align-items","column","summaryType","displayFormat","valueFormat","company","loadMode","Viewcurrentlists","print","pathname","row","edit","listData","remove","trackingNumber","trackingCompany","length","byKey","open","websiteurl","allowDeleting","render","valueExpr","displayExpr","text","trackingwebsite","Viewcompletedlists","selectedItemKeys","selectTextOnEditStart","startEditAction","onSelectionChanged","selectionChanged","selectionChangedEdit","contentReady","PrintList","renderWeight","shippingDate","totalweight","EditList","newarray","companyName","companyAddress","companyCity","companyPC","companyNumber","oldarray","i","q","concat","put","Admin","cellInfo","customizeText","password_cover","App","path","exact","component","HomePage","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e5e84274.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport notify from 'devextreme/ui/notify';\r\nconst axios = require('axios');\r\nconst URL = 'https://us-central1-korean-export-dbms.cloudfunctions.net/app/api'\r\n//const URL = 'http://localhost:5001/korean-export-dbms/us-central1/app/api';\r\n\r\nfunction Loginform(props) {\r\n\r\n    const history = useHistory();\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n    function validate() {\r\n        return username.length > 0 && password.length > 0;\r\n    }\r\n\r\n    function handleSubmit(event) {\r\n        if (username === 'admin1992' && password === 'password1992') {\r\n            setUsername('success!')\r\n            setPassword('')\r\n            history.push('/admin')\r\n        }\r\n        else if (username != null) {\r\n            axios.post(`${URL}/user/login`, {\r\n                username, password\r\n            }).then((res) => {\r\n                const message = res.data.message;\r\n                if(message!='success'){\r\n                    notify(message, 'error')\r\n                }\r\n                else{\r\n                    history.push('/home')\r\n                }\r\n            })\r\n        }\r\n        else {\r\n            setUsername('incorrect username/password')\r\n            setPassword('')\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n    /*\r\n    .then((response) => {\r\n                history.push('/home');\r\n              }, (error) => {\r\n                notify('Incorrect Username/Password','error')\r\n              });\r\n    */\r\n\r\n    return (\r\n        <div className='header'>\r\n            <h4 className='white-text'> Korean Database Management System  </h4>\r\n\r\n            <div className='login-form'>\r\n                <div className='login-text'>\r\n                    <h5>Enter Details</h5>\r\n                </div>\r\n                <div className='username-password'>\r\n                    <h6>Username</h6></div>\r\n                <div>\r\n                    <input\r\n                        className='login-input'\r\n                        id='username'\r\n                        name='username'\r\n                        placeholder='type username'\r\n                        value={username}\r\n                        onChange={e => setUsername(e.target.value)}\r\n                    ></input>\r\n                </div>\r\n                <div className='username-password'>\r\n                    <h6>Password</h6></div>\r\n                <div>\r\n                    <input\r\n                        className='login-input'\r\n                        id='password'\r\n                        name='password'\r\n                        placeholder='minimum 8 characters'\r\n                        type='password'\r\n                        value={password}\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    ></input>\r\n                </div>\r\n                <div className='center'>\r\n                    <button\r\n                        className='login-button'\r\n                        type='button'\r\n                        Go homepage\r\n                        disabled={username === '' || password === ''}\r\n                        onClick={handleSubmit}>\r\n                        Login\r\n                </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Loginform;","import React from 'react';\r\nimport './App.css';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Logout() {\r\n\r\n    const history = useHistory();\r\n\r\n    function handleSubmit(event) {\r\n        history.push('/')\r\n      }\r\n\r\n    return (\r\n       <button\r\n       className='logout-button'\r\n       type='button'\r\n       Go loginform\r\n       onClick={handleSubmit}\r\n       >\r\n           Log Out\r\n       </button>\r\n    );\r\n\r\n} ;\r\nexport default Logout;\r\n","import React, { useState, useEffect } from 'react';\r\nimport 'materialize-css/dist/css/materialize.min.css';\r\nimport './App.css';\r\nimport Logout from './Logout';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction Homepage() {\r\n\r\n   const history = useHistory();\r\n\r\n   function handleClick(event){\r\n      if(event.target.id==='1'){\r\n         history.push('/additem')\r\n      }\r\n      if(event.target.id==='2'){\r\n         history.push('/searchitems')\r\n      }\r\n      if(event.target.id==='4'){\r\n         history.push('/createnewlist')\r\n      }\r\n      if(event.target.id==='5'){\r\n         history.push('/viewcurrentlists')\r\n      }\r\n      if(event.target.id==='6'){\r\n         history.push('/viewcompletedlists')\r\n      }\r\n   }\r\n\r\n\r\n    return (\r\n     <div>\r\n        <div className='header'>\r\n           <h4 className='white-text'> Home Page </h4>\r\n        </div>\r\n           <Logout/>\r\n           <div>\r\n               <div className='home-box-1'>\r\n                   <div className='username-password'>\r\n                       <h5>Item Database</h5>\r\n                   </div>\r\n                 <button className='home-box-button'\r\n                 id = '1'\r\n                 onClick={handleClick}>\r\n                    Add Item\r\n                 </button>\r\n                 <button className='home-box-button'\r\n                 id = '2'\r\n                 onClick={handleClick}>\r\n                    Search Items\r\n                 </button>\r\n               </div>\r\n               <div className='home-box-2'>\r\n               <div className='username-password'>\r\n                   <h5>Shipping Lists</h5>\r\n               </div>\r\n               <button className='home-box-button'\r\n               id = '4'\r\n               onClick={handleClick}>\r\n                  Create New List\r\n               </button>\r\n               <button className='home-box-button'\r\n               id = '5'\r\n               onClick={handleClick}>\r\n                   View Current Lists\r\n                 </button>\r\n                 <button className='home-box-button'\r\n                 id = '6'\r\n                 onClick={handleClick}>\r\n                  View Completed Lists\r\n                 </button>\r\n               </div>\r\n           </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Homepage;","import './App.css';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport React, { useState, Component } from 'react';\r\nimport Logout from './Logout';\r\nimport notify from 'devextreme/ui/notify';\r\nconst axios = require('axios');\r\nconst URL = 'https://us-central1-korean-export-dbms.cloudfunctions.net/app/api'\r\n\r\nfunction Additem() {\r\n\r\n    const history = useHistory();\r\n\r\n    const [barcode, setBarcode] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [price, setPrice] = useState(\"\");\r\n    const [weight, setWeight] = useState(\"\");\r\n    const [description, setDesc] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n\r\n    function handleClick(event) {\r\n        if (barcode === '' || name === '' || price === '' || weight === '') {\r\n            notify('Could not add items to database', \"error\");\r\n        } else {\r\n            axios.post(`${URL}/items/additem`, {\r\n                barcode, name, price, weight, description\r\n            })\r\n                .catch(err => notify(\"Item could not be added!\", \"error\"))\r\n                .then(notify(\"Item Added!\", \"success\"));\r\n            setError('')\r\n            setBarcode('')\r\n            setName('')\r\n            setPrice('')\r\n            setWeight('')\r\n            setDesc('')\r\n        }\r\n    }\r\n\r\n    function handleDone(event) {\r\n        history.push('/home')\r\n    }\r\n\r\n    return (\r\n        <div className='header'>\r\n            <h4 className='white-text'>Add Item</h4>\r\n            <Logout />\r\n            <div className='additem-box'>\r\n                <div className='gen-text'>\r\n                    <h1>{error}</h1>\r\n                   Barcode Scan:\r\n                   <input className='text-input' id='add-barcode' type='number' value={barcode}\r\n                        onChange={e => setBarcode(e.target.value)} placeholder='must enter'></input>\r\n                </div>\r\n                <div className='gen-text'>\r\n                    Name:\r\n                   <input className='text-input' id='add-name' type='text' value={name}\r\n                        onChange={e => setName(e.target.value)} placeholder='must enter'></input>\r\n                </div>\r\n                <div className='gen-text'>\r\n                    Price (in $):\r\n                   <input className='text-input' id='add-price' type='number' value={price}\r\n                        onChange={e => setPrice(e.target.value)} placeholder='optional'></input>\r\n                </div>\r\n                <div className='gen-text'>\r\n                    Weight (in kg):\r\n                   <input className='text-input' id='add-weight' type='number' value={weight}\r\n                        onChange={e => setWeight(e.target.value)} placeholder='optional'></input>\r\n                </div>\r\n                <div className='gen-text'>\r\n                    Description:\r\n                   <input className='text-input' id='add-desc' type='text' value={description}\r\n                        onChange={e => setDesc(e.target.value)} placeholder='optional'></input>\r\n                </div>\r\n                <button className='add-item-button'\r\n                    onClick={handleClick}>\r\n                    Add Item\r\n               </button>\r\n                <button className='add-item-button'\r\n                    onClick={handleDone}>\r\n                    Done\r\n               </button>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n};\r\n\r\nexport default Additem;\r\n","\r\nimport './App.css';\r\nimport Logout from './Logout';\r\nimport React, { useState, Component } from 'react';\r\nimport DataGrid, {\r\n    Column,\r\n    Pager,\r\n    Paging,\r\n    Editing,\r\n    Form,\r\n    Popup,\r\n    Position,\r\n    SearchPanel,\r\n    Export\r\n} from 'devextreme-react/data-grid';\r\nimport 'devextreme-react/text-area';\r\nimport { Item } from 'devextreme-react/form';\r\nimport CustomStore from \"devextreme/data/custom_store\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.material.blue.light.css';\r\nimport notify from 'devextreme/ui/notify';\r\n\r\nconst URL = 'https://us-central1-korean-export-dbms.cloudfunctions.net/app';\r\n\r\nfunction handleErrors(response) {\r\n    if (!response.ok) {\r\n        throw Error(response.statusText);\r\n    }\r\n    return response;\r\n}\r\n\r\nclass Searchitems extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            itemData: new CustomStore({\r\n                key: 'id',\r\n                load: () => {\r\n                    return fetch(`${URL}/api/items`)\r\n                        .then(handleErrors)\r\n                        .then(response => response.json())\r\n                        .catch(() => { throw 'Network error' })\r\n                },\r\n                insert: (values) => {\r\n                    return fetch(`${URL}/api/items/additem`, {\r\n                        method: \"POST\",\r\n                        body: JSON.stringify(values),\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    }).then(handleErrors)\r\n                        .catch(err => notify(\"Item could not be added!\", \"error\"))\r\n                        .then(notify(\"Item Added!\", \"success\"));\r\n\r\n                },\r\n                update: (key, values) => {\r\n                    return fetch(`${URL}/api/items/update/${key}`, {\r\n                        method: \"PUT\",\r\n                        body: JSON.stringify(values),\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    }).then(handleErrors)\r\n                        .catch(err => notify(\"Item could not be updated!\", \"error\"))\r\n                        .then(notify(\"Item Updated!\", \"success\"));\r\n                }\r\n            }),\r\n            refreshMode: 'full'\r\n        };\r\n        this.handleRefreshModeChange = this.handleRefreshModeChange.bind(this);\r\n    }\r\n\r\n    handleDone = (e) => {\r\n        this.props.history.push('/home');\r\n    }\r\n    handleRefresh = (e) => {\r\n        window.location.reload(true);\r\n    }\r\n\r\n    handleRefreshModeChange(e) {\r\n        this.setState({ refreshMode: e.value });\r\n    }\r\n\r\n    render() {\r\n        const { refreshMode, itemData } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"create-table-box\">\r\n                    <h2 align=\"center\"\r\n                    >Item Database</h2>\r\n                    <DataGrid\r\n                        dataSource={itemData}\r\n                        showBorders={true}\r\n                        repaintChangesOnly={true}\r\n                        keyExpr=\"id\" >\r\n                        <Editing\r\n                            mode=\"popup\"\r\n                            allowUpdating={true}\r\n                            allowAdding={true}\r\n                            refreshMode={refreshMode}>\r\n                            <Popup title='Item Information' showTitle={true} width={700} height={525}>\r\n                                <Position my=\"center\" at=\"center\" of={window} />\r\n                            </Popup>\r\n                            <Form>\r\n                                <Item itemType=\"group\" colCount={3} colSpan={2}>\r\n                                    <Item dataField=\"barcode\" />\r\n                                    <Item dataField=\"name\" />\r\n                                </Item>\r\n                                <Item itemType=\"group\" colCount={3} colSpan={2}>\r\n\r\n                                    <Item dataField=\"price\" />\r\n                                    <Item dataField=\"weight\" />\r\n                                    <Item dataField=\"isAvailable\"\r\n                                        dataType=\"boolean\" />\r\n                                    <Item\r\n                                        dataField=\"description\"\r\n                                        editorType=\"dxTextArea\"\r\n                                        colSpan={3}\r\n                                        editorOptions={{ height: 100 }} />\r\n                                </Item>\r\n                            </Form>\r\n                        </Editing>\r\n                        <Export enabled={true} fileName=\"DatabaseItems\" allowExportSelectedData={false} />\r\n                        <SearchPanel\r\n                            visible={true}\r\n                            width={250}\r\n                            placeholder=\"Search...\" />\r\n                        <Paging defaultPageSize={5} />\r\n                        <Pager\r\n                            showPageSizeSelector={true}\r\n                            allowedPageSizes={[5, 10, 20]}\r\n                            showInfo={true} />\r\n                        <Column dataField=\"id\"\r\n                            dataType=\"number\"\r\n                            alignment=\"center\"\r\n                            allowEditing={false}\r\n                            caption=\"Item ID\" />\r\n                        <Column dataField=\"barcode\"\r\n                            dataType=\"number\"\r\n                            alignment=\"center\" />\r\n                        <Column dataField=\"name\" />\r\n                        <Column dataField=\"description\" />\r\n                        <Column dataField=\"price\"\r\n                            dataType=\"number\"\r\n                            caption=\"Price ($)\"\r\n                            format={{ type: 'currency', precision: 2 }} />\r\n                        <Column dataField=\"weight\"\r\n                            dataType=\"number\"\r\n                            caption=\"Weight (kg)\" />\r\n                        <Column dataField=\"isAvailable\"\r\n                            caption=\"Is Available\"\r\n                            alignment=\"center\"\r\n                            dataType=\"boolean\" />\r\n                    </DataGrid>\r\n                </div>\r\n                <div>\r\n                    <button className='add-item-button'\r\n                        onClick={this.handleDone}>\r\n                        Done\r\n               </button>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Searchitems;\r\n","import React, { useState, Component } from 'react';\r\nimport './App.css';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Logout from './Logout';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport DataGrid, {\r\n    Column,\r\n    Pager,\r\n    Paging,\r\n    Button,\r\n    Form,\r\n    Position,\r\n    SearchPanel,\r\n    Editing,\r\n    Popup,\r\n    Sorting\r\n} from 'devextreme-react/data-grid';\r\nimport 'devextreme-react/text-area';\r\nimport { TextBox } from 'devextreme-react';\r\nimport { Item } from 'devextreme-react/form';\r\nimport CustomStore from \"devextreme/data/custom_store\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.material.blue.light.css';\r\nimport notify from 'devextreme/ui/notify';\r\n\r\nconst axios = require('axios');\r\n\r\nconst URL = 'https://us-central1-korean-export-dbms.cloudfunctions.net/app';\r\n\r\nfunction handleErrors(response) {\r\n    if (!response.ok) {\r\n        throw Error(response.statusText);\r\n    }\r\n    return response;\r\n}\r\n\r\nclass Createnewlist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [],\r\n            currentitem: [],\r\n            companyname: \"\",\r\n            companyaddress: \"\",\r\n            itemData: new CustomStore({\r\n                key: 'id',\r\n                load: () => {\r\n                    return fetch(`${URL}/api/items/available`)\r\n                        .then(handleErrors)\r\n                        .then(response => response.json())\r\n                        .catch(() => { throw 'Network error' })\r\n                },\r\n                update: (key, values) => {\r\n                    const array = [{ id: key, quantity: values.quantity, weight: \"0\", price: \"\", name: \"\" }]\r\n                    return (\r\n                        this.setState({ items: [...this.state.items, ...array] })\r\n                    );\r\n                }\r\n            }),\r\n            refreshMode: 'reshape'\r\n        };\r\n        this.handleRefreshModeChange = this.handleRefreshModeChange.bind(this);\r\n    }\r\n    handleRefreshModeChange(e) {\r\n        this.setState({ refreshMode: e.value });\r\n    }\r\n\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.id]: e.target.value });\r\n    }\r\n\r\n    render() {\r\n        const { itemData, refreshMode } = this.state;\r\n        const { companyname, address } = this.state;\r\n        const { items } = this.state;\r\n\r\n        function handleDone() {\r\n            if (companyname == null || address == null || items == null) {\r\n                notify(\"Either Company Name, Address or items is null\", \"error\")\r\n            }\r\n            else {\r\n                axios.post(`${URL}/api/list/newlist`, {\r\n                    companyname, address, items\r\n                })\r\n                    .then(function (response) {\r\n                        notify(\"List Created\", 'success');\r\n                        window.location.replace('https://korean-export-dbms.web.app/home')\r\n                    })\r\n                    .catch(function (error) {\r\n                        notify(error, 'error');\r\n                        console.log(error);\r\n                    });\r\n\r\n            }\r\n\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <div className='header'>\r\n                    <h4 className='white-text'>Create New List</h4>\r\n                    <Logout />\r\n                    <div className='create-form-box'>\r\n                        <div className=\"dx-field\">\r\n                            <div className=\"dx-field-value\">\r\n                                <label for=\"companyname\">Company Name</label>\r\n                                <input type=\"text\" value={companyname} onChange={this.onChange} class=\"form-control\" id=\"companyname\" placeholder=\"Company Name\"></input>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"dx-field\">\r\n                            <div className=\"dx-field-value\">\r\n                                <label for=\"companyname\">Address</label>\r\n                                <input type=\"text\" value={address} onChange={this.onChange} class=\"form-control\" id=\"address\" placeholder=\"Address\"></input>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"create-table-box\">\r\n                        <DataGrid\r\n                            dataSource={itemData}\r\n                            showBorders={true}\r\n                            repaintChangesOnly={true}\r\n                            key=\"id\" >\r\n                            <Sorting mode=\"single\" />\r\n                            <Editing\r\n                                mode=\"popup\"\r\n                                allowUpdating={true}\r\n                                refreshMode={refreshMode}>\r\n                                <Popup title={this.name} showTitle={false} width={400} height={200}>\r\n                                    <Position my=\"center\" at=\"center\" of={window} />\r\n                                </Popup>\r\n                                <Form>\r\n                                    <Item dataField=\"name\" />\r\n                                    <Item dataField=\"quantity\"\r\n                                        dataType=\"number\" />\r\n                                </Form>\r\n                            </Editing>\r\n                            <SearchPanel\r\n                                visible={true}\r\n                                width={250}\r\n                                placeholder=\"Search...\" />\r\n                            <Paging defaultPageSize={10} />\r\n                            <Pager\r\n                                showPageSizeSelector={true}\r\n                                allowedPageSizes={[10, 15, 20]}\r\n                                showInfo={true} />\r\n                            <Column dataField=\"id\"\r\n                                visible={false} />\r\n                            <Column dataField=\"barcode\"\r\n                                dataType=\"number\"\r\n                                alignment=\"center\" />\r\n                            <Column dataField=\"name\"\r\n                                allowEditing={false} />\r\n                            <Column dataField=\"description\" />\r\n                            <Column dataField=\"price\"\r\n                                dataType=\"number\"\r\n                                caption=\"Price ($)\"\r\n                                format={{ type: 'currency', precision: 2 }} />\r\n                            <Column dataField=\"weight\"\r\n                                dataType=\"number\"\r\n                                caption=\"Weight (kg)\" />\r\n                            <Column dataField=\"quantity\"\r\n                                dataType=\"number\"\r\n                                caption=\"Added Quantity\"\r\n                                defaultSortOrder=\"asc\" />\r\n                            <Column type=\"buttons\">\r\n                                <Button name=\"edit\" />\r\n                            </Column>\r\n                        </DataGrid>\r\n                    </div>\r\n                    <div>\r\n                        <button className='add-item-button'\r\n                            onClick={handleDone}>\r\n                            Add List\r\n                    </button>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Createnewlist;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport notify from 'devextreme/ui/notify';\r\nimport Moment from 'react-moment';\r\nimport DataGrid, {\r\n    Column,\r\n    Pager,\r\n    Paging,\r\n    SearchPanel,\r\n    MasterDetail,\r\n    Selection,\r\n    Summary,\r\n    TotalItem,\r\n    Lookup,\r\n    Editing,\r\n    Popup,\r\n    Position,\r\n    Form,\r\n    Sorting,\r\n    Button,\r\n    Export\r\n} from 'devextreme-react/data-grid';\r\nimport { Item } from 'devextreme-react/form';\r\nimport CustomStore from \"devextreme/data/custom_store\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.material.blue.light.css';\r\nconst URL = 'https://us-central1-korean-export-dbms.cloudfunctions.net/app';\r\n\r\n\r\nfunction handleErrors(response) {\r\n    if (!response.ok) {\r\n        throw Error(response.statusText);\r\n    }\r\n    return response;\r\n}\r\n\r\nfunction renderDetail(props) {\r\n    let { items = [], address, companyname } = props.data;\r\n\r\n    return (\r\n        <div align=\"center\">\r\n            <h6>Company: {companyname}</h6>\r\n            <h6>Delivery Address: {address}</h6>\r\n            <DataGrid\r\n                dataSource={items}\r\n                width=\"50%\"\r\n                align-items=\"center\"\r\n                showBorders={true}>\r\n                <Column dataField=\"name\" />\r\n                <Column dataField=\"quantity\" />\r\n                <Column dataField=\"weight\" />\r\n                <Column dataField=\"price\" />\r\n                <Summary>\r\n                    <TotalItem\r\n                        column=\"quantity\"\r\n                        summaryType=\"sum\"\r\n                        displayFormat={'Total Quantity: {0}'} />\r\n                    <TotalItem\r\n                        column=\"weight\"\r\n                        summaryType=\"sum\"\r\n                        displayFormat={'Total Weight (kg): {0}'}\r\n                        valueFormat={{ type: 'fixedPoint', precision: 2 }} />\r\n                    <TotalItem\r\n                        column=\"price\"\r\n                        summaryType=\"sum\"\r\n                        displayFormat={'Total Price: {0}'}\r\n                        valueFormat={{ type: 'currency', precision: 2 }} />\r\n                </Summary>\r\n            </DataGrid>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nconst company = new CustomStore({\r\n    key: '_id',\r\n    loadMode: 'raw',\r\n    load: () => {\r\n        return fetch(`${URL}/api/tracking`)\r\n            .then(handleErrors)\r\n            .then(response => response.json())\r\n            .catch((err) => { throw 'Network error' })\r\n    }\r\n});\r\n\r\nclass Viewcurrentlists extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            listData: new CustomStore({\r\n                key: 'id',\r\n                loadMode: 'raw',\r\n                load: () => {\r\n                    return fetch(`${URL}/api/list`)\r\n                        .then(handleErrors)\r\n                        .then(response => response.json())\r\n                        .catch(() => { throw 'Network error' })\r\n                },\r\n                update: (key, values) => {\r\n                    return fetch(`${URL}/api/list/update/${key}`, {\r\n                        method: \"PUT\",\r\n                        body: JSON.stringify(values),\r\n                        headers: {\r\n                            'Content-Type': 'application/json'\r\n                        }\r\n                    }).then(handleErrors);\r\n                },\r\n                remove: (key) => {\r\n                    return fetch(`${URL}/api/list/delete/${key}`, {\r\n                        method: \"DELETE\"\r\n                    }\r\n                    )\r\n                }\r\n            }),\r\n            refreshMode: 'full'\r\n        };\r\n    }\r\n\r\n    trackingwebsite(props) {\r\n        let { trackingNumber, trackingCompany } = props.row.data;\r\n\r\n        if (trackingNumber.length === 0) {\r\n            notify(\"No Tracking Number\", \"error\")\r\n        }\r\n        else\r\n            company.byKey(trackingCompany).then(\r\n                (company) => { window.open(`${company.websiteurl}${trackingNumber}`) },\r\n                (error) => { notify(\"Erorr finding company\", \"error\") }\r\n            );\r\n    }\r\n    print = (props) => {\r\n        this.props.history.push({\r\n            pathname: `/list/print/${props.row.data.id}`,\r\n            data: props.row.data\r\n        })\r\n    }\r\n\r\n    edit = (props) => {\r\n        this.props.history.push({\r\n            pathname: `/list/edit/${props.row.data.id}`,\r\n            data: props.row.data\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { listData } = this.state;\r\n        const { refreshMode } = this.state;\r\n\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"create-table-box\">\r\n                    <h2 align=\"center\"\r\n                    >Current Shipping Lists</h2>\r\n                </div>\r\n                <DataGrid\r\n                    keyExpr=\"id\"\r\n                    dataSource={listData}\r\n                    showBorders={true}>\r\n                    <Editing\r\n                        mode=\"popup\"\r\n                        allowDeleting={true}\r\n                        allowUpdating={true}\r\n                        refreshMode={refreshMode}>\r\n                        <Popup title=\"Shipping List Edit\" showTitle={true} width={600} height={600}>\r\n                            <Position my=\"center\" at=\"center\" of={window} />\r\n                        </Popup>\r\n                        <Form>\r\n                            <Item dataField=\"companyname\" />\r\n                            <Item dataField=\"address\" />\r\n                            <Item dataField=\"packingDate\" />\r\n                            <Item dataField=\"shippingDate\" />\r\n                            <Item dataField=\"trackingCompany\" />\r\n                            <Item dataField=\"trackingNumber\" />\r\n                            <Item dataField=\"shippingWeight\" />\r\n                            <Item dataField=\"complete\" />\r\n                        </Form>\r\n                    </Editing>\r\n                    <Selection mode=\"single\" />\r\n                    <Sorting mode=\"single\" />\r\n                    <Export enabled={true} fileName=\"Current_Shipping_List\" allowExportSelectedData={false} />\r\n                    <MasterDetail enabled={true} render={renderDetail} />\r\n                    <SearchPanel\r\n                        visible={true}\r\n                        width={250}\r\n                        placeholder=\"Search...\" />\r\n                    <Paging defaultPageSize={5} />\r\n                    <Pager\r\n                        showPageSizeSelector={true}\r\n                        allowedPageSizes={[5, 10, 20]}\r\n                        showInfo={true} />\r\n                    <Column dataField=\"id\"\r\n                        dataType=\"number\"\r\n                        alignment=\"center\"\r\n                        allowEditing={false}\r\n                        caption=\"List ID\" />\r\n                    <Column dataField=\"companyname\"\r\n                        caption=\"Company Name\" />\r\n                    <Column dataField=\"address\"\r\n                        visible={false} />\r\n                    <Column dataField=\"packingDate\"\r\n                        dataType=\"date\"\r\n                        format=\"dd/MM/yyyy\" />\r\n                    <Column dataField=\"totalquantity\"\r\n                        caption=\"Total Quantity\" />\r\n                    <Column dataField=\"totalprice\"\r\n                        dataType=\"number\"\r\n                        caption=\"Total Price ($)\"\r\n                        format={{ type: 'currency', precision: 2 }} />\r\n                    <Column dataField=\"shippingWeight\"\r\n                        dataType=\"number\"\r\n                        caption=\"Total Weight (kg)\" />\r\n                    <Column dataField=\"trackingCompany\" caption=\"TrackingCompany\">\r\n                        <Lookup dataSource={company} valueExpr=\"_id\" displayExpr=\"companyName\" />\r\n                    </Column>\r\n                    <Column dataField=\"trackingNumber\" />\r\n                    <Column dataField=\"shippingDate\"\r\n                        dataType=\"date\"\r\n                        format=\"dd/MM/yyyy\" />\r\n                    <Column dataField=\"complete\"\r\n                        dataType=\"boolean\" />\r\n                    <Column type=\"buttons\">\r\n                        <Button name=\"edit\" />\r\n                        <Button text=\"T\"\r\n                            onClick={this.trackingwebsite} />\r\n                        <Button text=\"P\"\r\n                            onClick={this.print} />\r\n                        <Button text=\"E\"\r\n                            onClick={this.edit} />\r\n                        <Button name=\"delete\" />\r\n                    </Column>\r\n                </DataGrid>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Viewcurrentlists;","import React, { useState, Component } from 'react';\r\nimport './App.css';\r\nimport Logout from './Logout';\r\nimport DataGrid, {\r\n   Column,\r\n   Pager,\r\n   Paging,\r\n   SearchPanel,\r\n   MasterDetail,\r\n   Selection,\r\n   Summary,\r\n   TotalItem,\r\n   Lookup,\r\n   Sorting,\r\n   FilterRow,\r\n   Export\r\n} from 'devextreme-react/data-grid';\r\nimport CustomStore from \"devextreme/data/custom_store\";\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport 'devextreme/dist/css/dx.material.blue.light.css';\r\nconst URL = 'https://us-central1-korean-export-dbms.cloudfunctions.net/app';\r\n\r\nfunction handleErrors(response) {\r\n   if (!response.ok) {\r\n      throw Error(response.statusText);\r\n   }\r\n   return response;\r\n}\r\n\r\nfunction renderDetail(props) {\r\n   let { items = [], address, companyname, company } = props.data;\r\n   return (\r\n      <div align=\"center\">\r\n         <h6>Company: {companyname}</h6>\r\n         <h6>Delivery Address: {address}</h6>\r\n         <DataGrid\r\n            dataSource={items}\r\n            width=\"50%\"\r\n            align-items=\"center\"\r\n            showBorders={true}>\r\n            <Column dataField=\"name\" />\r\n            <Column dataField=\"quantity\" />\r\n            <Column dataField=\"weight\" />\r\n            <Column dataField=\"price\" />\r\n            <Summary>\r\n               <TotalItem\r\n                  column=\"quantity\"\r\n                  summaryType=\"sum\"\r\n                  displayFormat={'Total Quantity: {0}'} />\r\n               <TotalItem\r\n                  column=\"weight\"\r\n                  summaryType=\"sum\"\r\n                  displayFormat={'Total Weight (kg): {0}'}\r\n                  valueFormat={{ type: 'fixedPoint', precision: 2 }} />\r\n               <TotalItem\r\n                  column=\"price\"\r\n                  summaryType=\"sum\"\r\n                  displayFormat={'Total Price: {0}'}\r\n                  valueFormat={{ type: 'currency', precision: 2 }} />\r\n            </Summary>\r\n         </DataGrid>\r\n      </div>\r\n   );\r\n}\r\n\r\nclass Viewcompletedlists extends Component {\r\n   constructor() {\r\n      super();\r\n      this.state = {\r\n         selectedItemKeys: [],\r\n         selectTextOnEditStart: true,\r\n         startEditAction: 'dblClick',\r\n         listData: new CustomStore({\r\n            key: 'id',\r\n            loadMode: 'raw',\r\n            load: () => {\r\n               return fetch(`${URL}/api/list/completed`)\r\n                  .then(handleErrors)\r\n                  .then(response => response.json())\r\n                  .catch(() => { throw 'Network error' })\r\n            },\r\n            update: (key, values) => {\r\n               return fetch(`${URL}/api/list/update/${key}`, {\r\n                  method: \"PUT\",\r\n                  body: JSON.stringify(values),\r\n                  headers: {\r\n                     'Content-Type': 'application/json'\r\n                  }\r\n               }).then(handleErrors);\r\n            }\r\n         }),\r\n         company: new CustomStore({\r\n            key: '_id',\r\n            loadMode: 'raw',\r\n            load: () => {\r\n               return fetch(`${URL}/api/tracking`)\r\n                  .then(handleErrors)\r\n                  .then(response => response.json())\r\n                  .catch(() => { throw 'Network error' })\r\n            }\r\n         }),\r\n         refreshMode: 'full'\r\n      };\r\n   }\r\n\r\n   render() {\r\n      const { listData } = this.state;\r\n      const { company } = this.state;\r\n\r\n      return (\r\n         <React.Fragment>\r\n            <div className=\"create-table-box\">\r\n               <h2 align=\"center\"\r\n               >Completed Shipping Lists</h2>\r\n            </div>\r\n            <DataGrid\r\n               keyExpr=\"id\"\r\n               dataSource={listData}\r\n               showBorders={true}\r\n               repaintChangesOnly={true}\r\n               onSelectionChanged={this.selectionChanged}\r\n               onSelectionChanged={this.selectionChangedEdit}\r\n               onContentReady={this.contentReady}>\r\n               <Sorting mode=\"single\" />\r\n               <Export enabled={true} fileName=\"Completed_Shipping_List\" allowExportSelectedData={false} />\r\n               <FilterRow visible={true} />\r\n               <Selection mode=\"single\" />\r\n               <MasterDetail enabled={true} render={renderDetail} />\r\n               <SearchPanel\r\n                  visible={true}\r\n                  width={250}\r\n                  placeholder=\"Search...\" />\r\n               <Paging defaultPageSize={5} />\r\n               <Pager\r\n                  showPageSizeSelector={true}\r\n                  allowedPageSizes={[5, 10, 20]}\r\n                  showInfo={true} />\r\n\r\n               <Column dataField=\"id\"\r\n                  dataType=\"number\"\r\n                  alignment=\"center\"\r\n                  allowEditing={false}\r\n                  caption=\"List ID\" />\r\n               <Column dataField=\"companyname\"\r\n                  caption=\"Company Name\" />\r\n               <Column dataField=\"packingDate\"\r\n                  dataType=\"date\"\r\n                  format=\"dd/MM/yyyy\" />\r\n               <Column dataField=\"totalquantity\"\r\n                  caption=\"Total Quantity\" />\r\n               <Column dataField=\"totalprice\"\r\n                  dataType=\"number\"\r\n                  caption=\"Total Price ($)\"\r\n                  format={{ type: 'currency', precision: 2 }} />\r\n               <Column dataField=\"totalweight\"\r\n                  dataType=\"number\"\r\n                  caption=\"Total Weight (kg)\" />\r\n               <Column dataField=\"trackingCompany\" caption=\"TrackingCompany\">\r\n                  <Lookup dataSource={company} valueExpr=\"_id\" displayExpr=\"companyName\" />\r\n               </Column>\r\n               <Column dataField=\"trackingNumber\" />\r\n               <Column dataField=\"shippingDate\"\r\n                  dataType=\"date\"\r\n                  format=\"dd/MM/yyyy\" />\r\n            </DataGrid>\r\n         </React.Fragment>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Viewcompletedlists;","import React, { Component } from \"react\";\nimport Moment from 'react-moment';\nimport DataGrid, {\n    Column,\n    Summary,\n    TotalItem\n} from 'devextreme-react/data-grid';\nimport './App.css';\n\nclass PrintList extends Component {\n\n    renderWeight = (weight) => {\n        if (weight === 0) {\n            return \"\"\n        }\n        else {\n            return `${weight} kg`;\n        }\n    }\n\n    print() {\n        window.print();\n    }\n\n    render() {\n        const { data } = this.props.location;\n        return (\n            <React.Fragment>\n                <br></br>\n                <div class=\"no-printme\">\n                    <button className='print-button' onClick={this.print}>PRINT</button>\n                </div>\n                <br></br>\n                <div className=\"printback\">\n                    <div>\n                        <h4>Order ID: {data.id}</h4>\n                        <h5>Company Name: {data.companyname}</h5>\n                        <h5>Address: {data.address}</h5>\n                        <br></br>\n                        <br></br>\n                        <h5>Shipping Date: <Moment format=\"DD/MM/YYYY\">{data.shippingDate}</Moment></h5>\n                        <h5>Shipping Weight: {this.renderWeight(data.totalweight)}</h5>\n                        <br></br>\n                        <DataGrid\n                            dataSource={data.items}\n                            width=\"50%\"\n                            align-items=\"center\"\n                            showBorders={true}>\n                            <Column dataField=\"name\" />\n                            <Column dataField=\"quantity\" />\n                            <Column dataField=\"weight\" />\n                            <Column dataField=\"price\" />\n                            <Summary>\n                                <TotalItem\n                                    column=\"quantity\"\n                                    summaryType=\"sum\"\n                                    displayFormat={'Total Quantity: {0}'} />\n                                <TotalItem\n                                    column=\"weight\"\n                                    summaryType=\"sum\"\n                                    displayFormat={'Total Weight (kg): {0}'}\n                                    valueFormat={{ type: 'fixedPoint', precision: 2 }} />\n                                <TotalItem\n                                    column=\"price\"\n                                    summaryType=\"sum\"\n                                    displayFormat={'Total Price: {0}'}\n                                    valueFormat={{ type: 'currency', precision: 2 }} />\n                            </Summary>\n                        </DataGrid>\n                    </div>\n                </div>\n                \n            </React.Fragment>\n\n        );\n    }\n}\n\nexport default PrintList;","import React, { useState, Component } from 'react';\nimport './App.css';\nimport { useHistory } from \"react-router-dom\";\nimport Logout from './Logout';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport DataGrid, {\n    Column,\n    Pager,\n    Paging,\n    Button,\n    Form,\n    Position,\n    SearchPanel,\n    Editing,\n    Popup,\n    Sorting\n} from 'devextreme-react/data-grid';\nimport 'devextreme-react/text-area';\nimport { TextBox } from 'devextreme-react';\nimport { Item } from 'devextreme-react/form';\nimport CustomStore from \"devextreme/data/custom_store\";\nimport 'devextreme/dist/css/dx.common.css';\nimport 'devextreme/dist/css/dx.material.blue.light.css';\nimport notify from 'devextreme/ui/notify';\n\nconst axios = require('axios');\n\nconst URL = 'https://us-central1-korean-export-dbms.cloudfunctions.net/app';\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nclass EditList extends Component {\n    constructor() {\n        super();\n        this.state = {\n            newarray: [],\n            currentitem: [],\n            companyName: \"\",\n            companyAddress: \"\",\n            companyCity: \"\",\n            companyPC: \"\",\n            companyNumber: \"\",\n            itemData: new CustomStore({\n                key: 'id',\n                load: () => {\n                    return fetch(`${URL}/api/items/available`)\n                        .then(handleErrors)\n                        .then(response => response.json())\n                        .catch(() => { throw 'Network error' })\n                },\n                update: (key, values) => {\n                    const array = [{ id: key, quantity: values.quantity, weight: \"0\", price: \"\", name: \"\" }]\n                    return (\n                        this.setState({ newarray: [...this.state.newarray, ...array] })\n                    );\n                }\n            }),\n            refreshMode: 'reshape'\n        };\n        this.handleRefreshModeChange = this.handleRefreshModeChange.bind(this);\n    }\n    handleRefreshModeChange(e) {\n        this.setState({ refreshMode: e.value });\n    }\n\n    render() {\n        const { itemData, refreshMode } = this.state;\n        const { newarray } = this.state;\n        const { data } = this.props.location;\n\n        const array = data.items;\n        const oldarray = [];\n\n        for (var i = 0; i < array.length; i++) {\n            var id = array[i].id;\n            var q = array[i].quantity;\n            oldarray.push({ id: id, quantity: q, weight: \"0\", price: \"\", name: \"\" })\n\n        }\n        function handleDone() {\n            let items = newarray.concat(oldarray);\n            axios.put(`${URL}/api/list/updatelist/${data.id}`, {\n                items\n            })\n                .then(function (response) {\n                    notify(\"List Updated\", \"success\");\n                    window.location.replace('https://korean-export-dbms.web.app/viewcurrentlists')\n                    console.log(response);\n                })\n                .catch(function (error) {\n                    notify(error);\n                    console.log(error, \"error\");\n                });\n        }\n        return (\n            <React.Fragment>\n                <div className='header'>\n                    <h4 className='white-text'>Edit List ID: {data.id}</h4>\n                    <Logout />\n                    <div className=\"create-table-box\">\n                        <DataGrid\n                            dataSource={itemData}\n                            showBorders={true}\n                            repaintChangesOnly={true}\n                            key=\"id\" >\n                            <Sorting mode=\"single\" />\n                            <Editing\n                                mode=\"popup\"\n                                allowUpdating={true}\n                                refreshMode={refreshMode}>\n                                <Popup title={this.name} showTitle={false} width={400} height={200}>\n                                    <Position my=\"center\" at=\"center\" of={window} />\n                                </Popup>\n                                <Form>\n                                    <Item dataField=\"name\" />\n                                    <Item dataField=\"quantity\"\n                                        dataType=\"number\" />\n                                </Form>\n                            </Editing>\n                            <SearchPanel\n                                visible={true}\n                                width={250}\n                                placeholder=\"Search...\" />\n                            <Paging defaultPageSize={10} />\n                            <Pager\n                                showPageSizeSelector={true}\n                                allowedPageSizes={[10, 15, 20]}\n                                showInfo={true} />\n                            <Column dataField=\"id\"\n                                visible={false} />\n                            <Column dataField=\"barcode\"\n                                dataType=\"number\"\n                                alignment=\"center\" />\n                            <Column dataField=\"name\"\n                                allowEditing={false} />\n                            <Column dataField=\"description\" />\n                            <Column dataField=\"price\"\n                                dataType=\"number\"\n                                caption=\"Price ($)\"\n                                format={{ type: 'currency', precision: 2 }} />\n                            <Column dataField=\"weight\"\n                                dataType=\"number\"\n                                caption=\"Weight (kg)\" />\n                            <Column dataField=\"quantity\"\n                                dataType=\"number\"\n                                caption=\"Added Quantity\"\n                                defaultSortOrder=\"asc\" >\n                            </Column>\n                            <Column type=\"buttons\">\n                                <Button name=\"edit\" />\n                            </Column>\n                        </DataGrid>\n                    </div>\n                    <div>\n                    <button className='add-item-button'\n                        onClick={handleDone}>\n                        Update List\n                    </button>\n                    </div>\n                </div>\n            </React.Fragment >\n        );\n    }\n}\n\n\nexport default EditList;\n","import React, { Component } from \"react\";\nimport Moment from 'react-moment';\nimport DataGrid, {\n    Column,\n    Editing,\n    Position,\n    Form,\n    Popup\n} from 'devextreme-react/data-grid';\nimport { Item } from 'devextreme-react/form';\nimport './App.css';\nimport Logout from './Logout';\nimport CustomStore from \"devextreme/data/custom_store\";\nimport notify from 'devextreme/ui/notify';\nconst axios = require('axios');\n\n\n//const URL = 'http://localhost:5001/korean-export-dbms/us-central1/app';\nconst URL = 'https://us-central1-korean-export-dbms.cloudfunctions.net/app'\n\nfunction handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n    return response;\n}\n\nclass Admin extends Component {\n    constructor() {\n        super();\n        this.state = {\n            itemData: new CustomStore({\n                key: '_id',\n                load: () => {\n                    return fetch(`${URL}/api/user`)\n                        .then(handleErrors)\n                        .then(response => response.json())\n                        .catch(() => { throw 'Network error' })\n                },\n                insert: (values) => {\n                    return fetch(`${URL}/api/user/add`, {\n                        method: \"POST\",\n                        body: JSON.stringify(values),\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    })\n                        .then(handleErrors)\n                        .catch(err => notify(\"User was not added! Remember Username needs to be unique\", \"error\"))\n                        .then(notify(\"User was added!\", \"success\"));\n\n                },\n                update: (key, values) => {\n                    return fetch(`${URL}/api/user/update/${key}`, {\n                        method: \"PUT\",\n                        body: JSON.stringify(values),\n                        headers: {\n                            'Content-Type': 'application/json'\n                        }\n                    }).then(handleErrors)\n                        .catch(err => notify(\"User could not be updated! Unique username required\", \"error\"))\n                        .then(notify(\"User updated!\", \"success\"));\n                }\n            }),\n            refreshMode: 'full'\n        };\n    }\n\n    password_cover(cellInfo) {\n        return '***********';\n    }\n\n    render() {\n        const { refreshMode, itemData } = this.state;\n        return (\n            <React.Fragment>\n\n                <div className=\"create-table-box\">\n                    <Logout />\n                    <h2 align=\"center\"\n                    >Admin Portal</h2>\n                </div>\n                <DataGrid\n                    dataSource={itemData}\n                    showBorders={true}\n                    repaintChangesOnly={true}\n                    keyExpr=\"_id\" >\n                    <Editing\n                        mode=\"popup\"\n                        allowUpdating={true}\n                        allowAdding={true}\n                        refreshMode={refreshMode}>\n                        <Popup title='User Information' showTitle={true} width={700} height={525}>\n                            <Position my=\"center\" at=\"center\" of={window} />\n                        </Popup>\n                        <Form>\n                            <Item dataField=\"username\" />\n                            <Item dataField=\"password\" />\n                        </Form>\n                    </Editing>\n                    <Column dataField=\"_id\"\n                        alignment=\"center\"\n                        allowEditing={false}\n                        caption=\"User Object ID\" />\n                    <Column dataField=\"username\" />\n                    <Column dataField=\"password\"\n                        customizeText={this.password_cover} />\n                    <Column dataField=\"signUpDate\"\n                        dataType=\"date\"\n                        format=\"dd/MM/yyyy\" />\n                </DataGrid>\n            </React.Fragment>\n        )\n    }\n\n}\n\nexport default Admin;","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport 'devextreme/dist/css/dx.common.css';\r\nimport Loginform from './Loginform';\r\nimport HomePage from './HomePage';\r\nimport Additem from './Additem';\r\nimport Searchitems from './SearchItems';\r\nimport Createnewlist from './Createnewlist';\r\nimport Viewcurrentlists from './Viewcurrentlists';\r\nimport Viewcompletedlists from './Veiwcompletedlists';\r\nimport PrintList from './PrintList';\r\nimport EditList from './EditList';\r\nimport Admin from './Admin';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\n\r\nconst App = () => {\r\n  return (\r\n\r\n    <Router>\r\n      <Switch>\r\n        <Route path='/' exact component={Loginform} />\r\n        <Route path='/home/' exact component={HomePage} />\r\n        <Route path='/additem/' exact component={Additem} />\r\n        <Route path='/searchitems/' component={Searchitems} />\r\n        <Route path='/createnewlist/' component={Createnewlist} />\r\n        <Route path='/viewcurrentlists/' component={Viewcurrentlists} />\r\n        <Route path='/viewcompletedlists/' component={Viewcompletedlists} />\r\n        <Route path='/list/print' component={PrintList} />\r\n        <Route path='/list/edit' component={EditList} />\r\n        <Route path='/admin' component={Admin} />\r\n      </Switch>\r\n      <div className='row'>\r\n      </div>\r\n    </Router>\r\n  );\r\n\r\n};\r\n\r\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App.jsx\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}